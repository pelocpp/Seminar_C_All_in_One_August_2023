C All in One
=============

Notizen Dienstag:

Unterprogramm

== Eine Folge von Anweisungen, die immer wieder erforderlich ist

== Ein Programm OHNE Unterprogramme ist schwer zu verstehen / zu lesen

== Strukturierung eines Programms

== Eine Folge von Anweisungen:
      Geringfügige Unterschiede: Anzahl der Wiederholungen (for/while) ==> Parameter

Nomenklatur:

- Unterprogramm
- Funktion / function
- Prozedur / procedure
- Subroutine
- Methode / method  ( Objekt-Orient. Programmierung / C ist eine prozedurale Programmiersprace )

Beispiel: Schlüsselwörter 'Function' / 'Procedure'

Allgemein:

2 Arten von Unterprogrammen:

a) Unterprogramme, die ein Ergebnis berechnen ( sin, cos , ...)

       Funktion / Function

       Der Typ des Ergebnisses muss festgelegt werden (Datentyp / int, double )

b) Unterprogramme, die kein Ergebnis berechnen ( paint )

       Prozedur / Procedure

       Es gib keinen Ergebnistyp: void

===================================================

	exit(123);

Beendet ein Programm unmittelbar / sofort !!!

===================================================

Unterprogramme haben einen Namen

Pro gesamtem Programm müssen diese Namen alle VERSCHIEDEN sein.

===================================================

Unterprogramme können Parameter haben:

= Ein Parameter ist ein Stellvertreter für eine Variable / einen Wert

= Ein Parameter hat einen Typ

  Hinweis: C / C++ / Java / C# zählen zu den typisierten Programmiersprachen

  Andere Sprachen kommen hier ohne Typ aus:  JavaScript / Python 

= Beim Aufruf des Unterprogramms ist für den Stellvertreter ein konkreter Wert anzugeben

===================================================

Welche Arten von Variablen gibt es in C bzgl.

   Lebensdauer / Sichtbarkeit / Gültigkeit ???

Antwort:

i) Globale Variablen

   Gelten für die GESAMTE Laufzeit des Programms.

   Wie wird sie definiert / vereinbart:

   Auf der obersten Ebene // NICHT in einem Unterprogramm.

===================================================

Warum sind Java, C# ... bei mehreren Dateien so einfach in der Hantierung

und C nicht ?????

C:  Übersetzung:  One-Pass Compiler übersetzt: Eine Datei wird EINMAL von Anfang bis Ende gelesen.

Java, C#:

Übersetzung:  Two-Pass Compiler übersetzt
  
Jede Datei wird ZWEIMAL von Anfang bis Ende gelesen.

===================================================

10 bis max. 15 Minuten Übung:

a) Fakultät:

Natürliche Zahl n:    n! = 1 * 2 * 3 * ... * (n-1) * n

    Beispiel:         5! = 1 * 2 * 3 * 4 * 5 = 120

b) Berechnung der Fakultät: fakul / fak / fakultaet 

   Prozedur / Funktion im Sinne von C

c) Zusatz: Ausgabe aller Fakultäten von 1! bis 30! in der Konsole
 
   Beobachung:  Diskutieren ...

Hinweis:

https://cplusplus.com/reference/cstdio/printf/

Was ist ein Überlauf:

long long = 8 Bytes = 64 Bits.

1 Byte = 255 = 1111 1111 (8 Bits) = FF (hex. Notation) 

Überlauf:

a) Es gibt KEINEN Absturz !!!

b) Die Werte in einer solchen Variablen sind FALSCH.

Konsequenz:

a) Eine Fakultät größer 20 ist im herkömmlichen Algorithmus
   nicht berechenbar !

b) Man könnte von long long zu double wechseln

   Nachteile: i) Auch ein double hat irgendwann einen Überlauf:

                  double:  vor komma stellen, nach komma stellen, exponent, mantisse

                  1234567890123456890 ==>  123.456 * 10 hoch 30

              ii) Rundungs Ungenauigkeiten

                  120.00001

c) Gibt es eine zufriedenstellende Lösung:

   i) Mit den so genannten "eingebauten" Datentypen (int, long)
      NICHT.

   ii) Mit selbstgeschriebenen Funktionen  schon.

       Bzw. Standard Bibliotheken

   Java:

   BigInteger reallyBig = 
     new BigInteger("1234567890123456890");

Siehe auch

https://stackoverflow.com/questions/21545468/big-integer-arithmetic

==================================================================

Zwischen Resumé:

Unterprogramme:  Grundlagen.

War das alles ???

NEIN.

Aber: Arrays und Zeiger (Pointer)

==================================================================

Zwischen Resumé:

C ... : Grundlagen

Fortgeschritten:   Alle Sprachen:  "Pointer"

==================================================================

Array:

== Eine Anzahl von Daten (hintereinander) DESSELBEN Datentyps

== Limitation: Ein Array hat eine FESTE Größe / Länge.

Bemerkung:

Es gibt auch Felder OHNE diese Limitation: 

Man spricht dann von einer "Liste" 


Was ist der Vorteil eines Arrays (mit Limitation):  PERFORMANZ.

Ist Python langsamer: Ja -- aber Python ist für moderne Rechner konzipiert.

Syntax:

int zahlen[10];

Hierdurch werden 10 int Variablen vereinbart.

Kurios: Der Datentyp steht links und rechts vom Bezeichner 'zahlen'.
i) Hat man so festgelegt
ii) Performanz:


Wie greife ich auf ein Feld = Array zu?

Mit dem Operator [] : Index-Operator

zahlen [3] = 123;

ACHTUNG:

Das ERSTE Element hat den Index 0 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Why:

    Weil ein Array (Stück Speicher) angesprochen wird.

    Der Index 0 steht dann für den ANFANG des Speichers: Anfangsadresse

==================================================================

Was passiert bei Zugriff auf ein Array mit falschem Index ???

A) Es wird der Index NICHT auf Zulässigkeit überprüft !!!!!!!!

   Ritchie / Kernighan:  PERFORMANZ && "A programmer knows what he does"

B) Wir tragen die Verantwortung

C) Was passiert in dem Programm:

   i)   Nichts (Zugriff hatte keine Auswirkung)
   ii)  Absturz
   iii) Sporadische Fehler: Zufälle Anordnung von i) oder ii)

 Hinweis: There are no exceptions in C   // Natürlich in C++
 
 ==================================================

 Präprozessor
 ------------

 Idee:

 Man erschaffe die Möglichkeit, BEVOR ein Programm übersetzt wird (Compiler),

 dass der Quelltext AUTOMATISIERT bearbeitet werden kann:

 Beispiel:

 #define  ist wie folgt realisiert:

 Beispiel:

 #define LENGTH  20

Jedes Textvorkommen von LENGTH wird im Quellcode durch 20 ersetzt.

Ausführlich:

Phase der Übersetzung in C:

A) Präprozessor
B) Compiler ( obj. ... )
C) Linker (obj. .... ==> .exe)

Fazit:

Eine #define - Präprozessor Anweisung eignet sich gut für globale Konstante !!!

=======================================================

Leere Anweisung:    ;

=======================================================

Es gibt in C keine Arrays :-))))

Es gibt in C NUR POINTER  :-)))

=======================================================


Zusammenführung Array und Unterprogramm
---------------------------------------


