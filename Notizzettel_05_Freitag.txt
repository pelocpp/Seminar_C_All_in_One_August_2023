C All in One
=============

Notizen Freitag:

Stukturen

Wie können wir in C Daten hantieren ?

i) Kleine Daten / Werte: Elementaren Datentyps (int, double, etc.)

ii) Mehrere Daten desselben Typs: Arrays (fixed sized) // Speicher via malloc (dynamic sized) 

iii) Mehrere Daten unterschiedlichen Typs: Struktur

Oder:

Eine Struktur fasst mehrere, logisch zusammengehörende Daten zu einer Einheit
zusammen.

// =================================================================

Verwendung einer Struktur in mehreren Dateien:

Definition der Struktur in einer Header-Datei vornehmen:

a) .c Dateien - C-Programmcode

b) .h Dateien - Deklarationen von Strukturen // Datentypen //
                struct / union / 

                Funktions-Prototypen
                ( Deklarationen der Schnittstelle einer Funktion )

                Auch #define's

                NICHT: C-Programmcode

                NICHT: Vereinbarung von globalen Variablen

                Vorhandenen Typen einen anderen Namen geben: typedef

// =========================================================

Was kann typedef ?

Portabilität

int: 

Hat auf einem Rechner 4 Bytes im Speicher.

Es gibt / gab Systeme, da hatte ein int nur 2 Bytes im Speicher
(  16 Bit Rechner System  )

Auch ein 16 Bit Rechner kennt ganzzahlige Variablen mit 4 Byte: long

====================================================================

Übergabe von Parametern in C an eine Funkion:

i)    Elementaren Variablen: Call-by_Value (Kopie)

ii)   Array: Ein Array (Name) steht für die Anfangsadresse:

      Es wird über die Adresse in das Original geschrieben:

      In das Feld, dessen Adresse übergeben wird.

iii)  Strukturen:  Call-by_Value (Kopie)

      Optional: Es wird eine Adresse einer Struktur übergeben

      ==> Dann greife ich auf das Original zu !!!!

      ( Ich möchte das Original schützen: Kopie übergeben )

      Und beachte: Übergabe eines Zeigers ist (wesentlich)
      performanter als Übergabe einer Kopie

      Mit 'const' kann man eine Struktur-Variable schützen
      ( kein schreibender Zugriff möglich )

====================================================================

Kleine Übung:

incrementTime:

Erhöht die Uhrzeit um 1 Sekunde - Achtung: Überlauf :)

11:12:58
11:12:59
11:12:60  <======  11:13:00

11:59:59  ==> 12:00:00

====================================================================

Was ist eine Union ?

Zunächst mal ähnlich (Syntax) zu einer Struktur:

union Test 
{
    float fwert;
    int   iwert;
};

ABER: Im Speicher liegen fwert und iwert an DERSELBEN Adresse :-))))

Mögliche Anwendung: Sehr maschinennahe SW

union Test t;

Nachtrag:

int, long, .........

Variablen dieser Typen können positiv und negativ sein.

int counter = 0;

counter ++;

2 Vorgehensweisen:

a) Ich weiß das ... nehme das in Kauf.

   Ein (MINIMALER) Nachteil: 

   Mein Wertebereich ist kleiner, da ich ja die negativen
   Werte umsonst haben könnte:

b) Will aber ich einen entsprechenden Datentyp haben:

   unsigned int counter = 0;

Konkret:

short == 2 Bytes:

Mit Vorzeichen:    -32.768 bis 32.767

Ohne Vorzeichen:   0 .. 65.535

FRAGE: Benötige ich wirklich den gesamten Wertebereich ???
       Vor allem von  32.768 bis 65.535

ODER:  Laufschleife:  0 bis 100 

// C: 2 Schlüsselwörter aufeinander folgend
unsigned int counter;

C#:  uint, ulong, int, long

====================================================================

Freitag Nachmittag:

Übung:  All - in - One:

== Arrays

== Strukturen

   Array von Strukturen

== Dynamische Daten

Samrtphone: Kontakte Verwaltung

== Contact

== Viele Kontakte: Array

-----------------------------------------

Umsetzung: Es soll sowohl statisches Verhalten
           als auch dynamisches Verhalten demonstriert werden.

           // Daten fester Länger als auch variabler Länge.


Beispiel:

struct contact
{
	char* firstName;
	char* lastName;
};

Zwei Adressen: Die beiden Namen sind DYNAMISCH zu allokieren

    was inbesondere bedeutet: Ihre Länge ist exakt 

    Genauer: Die Länge des Puffers ist exakt der Länge des Namens.


Statisch: Anzahl der Kontakte:

Array einer FESTEN Länge.


Hinweis:

Strukturen können 1:1 kopiert werden

Arrays doch auch:  NEIN. Warum: Weil Arrays nur Zeiger sind.

=====================================================

Vorsicht:

Die Eingabe von der Konsole ist - leider auf Grund einer nicht perfekten - 

Bibliothek nicht immer ganz einfach !!!

=====================================================
