C All in One
=============

Notizen Donnerstag:

Zeichen und Zeichenketten
(char und string)

Zeichen: Einzelnes Zeiches

Zeichenketten: Mehrere Zeichen

Ausnahmen: Maskierungszeichen  \

=========================================

Wofür steht ein Wert des Datentyps char?

== (einfach):  ein Zeichen

== (exakt):    einer Zahl (int) aus dem Zahlenbereich ASCII Code

Klassische Definition
aller Wörter in einem C-Programm:

Sie müssen mit Zeichen aus der ASCII Code Tabelle gebildet werden.

Nicht: Umlaute zB

ASCII Code:    1 Zeichen aus dem ASCII-Code:  1 Byte

               Noch genauer: 7 Bits - das oberste ist unbenutzt

UNICODE Code:  1 Zeichen aus dem ASCII-Code:  2 Byte

Schreibmaschine:

Wagen

Hebel für den Wagenrücklauf:

A) Bewegt den Wagen nach links:              Carriage Return

B) Dreht den Wagen um eine Zeile nach unten: Line Feed

\n == 10 

und

\r == 13

===========================================

Erweiterte ASCII Tabelle: Viele solcher Tabellen.

===========================================

Zeichenkette:

Folge von Zeichen:

Syntax: In Doppelhochkomma

"ABC"

"12345"

"asefsefrse3wdfrtunincfvxrbtznuzfnu"

----------------------------------------------

Welchen Datentyp hat eine Zeichenkette 
in der Darstellung mit "" ???

const char* = "1234567890";

----------------------------------------------

Wie ist eine Zeichenkette im Speicher abgelegt ??

Beispiel:

"ABC"

i)   Mit den entsprechenden ASCII - Codes: 65, 66, 67

ii)  Mit einer Null als Kennung für das Ende der Zeichenkette !

     Begrifflichkeiten:

     Null  - 0
     ASCI Null
     Backslash 0

===================================================

a) Konstante Zeichenketten :  "ABC"

b) Nicht-konstante Zeichenketten:

   i) malloc

   ii) Mit einem Feld des Datentyps char (Anzahl der Zeichen begrenzt)

===================================================

Programmiersprache C:

== Arithmetische Verarbeitung 

== Textverarbeitung

==> Zeichenkettenverarbeitung:


Zeichenkettenverarbeitung:

- Länge einer Zeichenkette
- Zeichenkette kopieren
- Zeichenkette anhängen
- Teil einer Zeichenkette extrahieren

- Insert: Ein Zeichen in eine Zeichenkette einfügen
- Replace: Zeichen an einer Stelle ersetzen / austauschen

Umsetzung:

- Länge einer Zeichenkette

Entwurf:

int  str_length  ( char* s ) ; 

Es ist die terminierenden Null zu suchen - 

ausgehend vom ersten Zeichen; Zeichen für Zeichen;

Eine Zählvariable der übersprungenen Zeichen ist das Ergebnis.

----------------------------------------------------

- Zeichenkette anhängen

"ABC"    "XYZ"

Ich möchte "XYZ" an "ABC" anhängen.

                "ABC"       "XYZ"         Wohin / Ziel

    str_append ( quelle ,            s,           ziel)

    str_append ( char* ,            char*,       char ziel[] )

    str_append ( char* quelle,     char* s,       char*  ziel   )

Ich kann am Ende der Zeichenkette quelle NICHT weiterschreiben:

DIESER Speicher gehört mir nicht.

ETWAS genauer formulieren:

a) quelle = Konstante Zeichenkette: Am Ende '\0'.

    Was danach im Speicher kommt, weiß ich nicht und gehört mir nicht.

b) quelle = Nicht-Konstante Zeichenkette: Am Ende '\0'.

   Theoretisch könnte das Feld LÄNGER sein ... aber das weiß ich nicht .

Vorgehensweise:

i)   In Ziel habe ich Platz für das Ergebnis
ii)  Erst Quelle nach Ziel umkopieren
iii) Dann s nach Ziel umkopieren
iV)  Am Ende eine terminierende Null noch ergänzen.

=============================================================

Beobachtung:

a) Erste Lösung war mit Array

b) Zweite Lösung ist mit malloc

Pro:

Was spricht für a): Laufzeit ist optimal 

                    ( bin nicht in der Lage, den Speicherplatz passgenau zu vergeben )

Was spricht für b): Speicherplatz ist optimal !!!

                    (  malloc und free kosten Zeit )

===============================================================

Alternative Definition einer Funktion str_append:

    char* str_append ( char* quelle, char* s);

Konsequenz:

Der Aufrufer von str_append muss free aufrufen !!!!!!!!!!!!!

===============================================================

Übung:

- Insert: Ein Zeichen in eine Zeichenkette einfügen
- Replace: Zeichen an einer Stelle ersetzen / austauschen

A) Insert:

  "ABCDE"  , an der Position 3 ein '!' einfügen ===> "ABC!DE"

  //  "ABCDE"        3        '!'       für das Ergebnis
  Insert (char* quelle, int pos, char ch,  char ziel[] )

  Eine gute Lösung: Überprüft, ob pos zur Länge der quelle passt.

B) Replace:

   "ABCDE", an der Position 3 das 'D' durch ein '!' ersetzen ===> "ABC!E"

   //      "ABCDE"         3          '!'
   Replace (char* quelle, int pos, char ch )

   Eine gute Lösung: Überprüft, ob pos zur Länge der quelle passt.

   Überraschung :)

   Abhilfe:   Zum Testen von Replace wird quelle wie folgt definiert:

   char quelle[] = "ABCDE";

   Why ===> Besprechung der Lösung !!!


==============================================================

Zeichenkettenverarbeitung über die Bibliothek string.h

https://de.wikibooks.org/wiki/C-Programmierung:_Zeichenkettenfunktionen

2 Beispiele:

strcat

strlen

Tuen das Gleiche wie str_length und str_append

1	strcpy    String kopieren
2	strncpy   String kopieren, maximal n Zeichen
3	strcat    String anhängen
4	strncat   String anhängen, maximal n Zeichen
5	strtok    Diese Funktion zerlegt einen String
6	strcspn
7	strpbrk
8	strchr
9	strrchr
10	strcmp    Zeichenketten vergleichen / compare
11	strncmp
12	strspn
13	strlen    Länge

==============================================================

int versus size_t

Hmmm, etwas akademisch:

a) Beides sind integer Werte (1,2, 3)

b) int kann auch negative Werte haben, size_t hingegen nur positive 

__int64 entspricht einem int auf einem 64 Bit Betriebssystem:

unsigned bedeutet: Ohne Vorzeichen, nur positive Werte

typedef unsigned __int64 size_t;

=============================================================

Vorsicht oder Achtung:

Die Zeichenkettenfunktionen wurden überarbeitet:

a) es gibt eine klassische Version

b) es gibt eine neue, secure Version

